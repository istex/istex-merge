const fs = require('fs-extra');
const { create } = require('xmlbuilder2');
const _ = require('lodash');

/**
 * Generates a Hal TEI from a unified record.
 * @param {object} unifiedRecord The unified record generated by `select`.
 * @param {string} path The path to write the TEI file to.
 * @returns {Promise} A Promise.
 */
function generateHalTEI (unifiedRecord, path) {
  const xmlDoc = {};
  xmlDoc.TEI = {};

  // Set the root TEI node attributes
  xmlDoc.TEI['@xmlns'] = 'http://www.tei-c.org/ns/1.0';
  xmlDoc.TEI['@xmlns:hal'] = 'http://hal.archives-ouvertes.fr/';

  // Create the base <text> structure
  _.set(xmlDoc.TEI, 'text.body.listBibl.biblFull', {});
  const biblFull = xmlDoc.TEI.text.body.listBibl.biblFull;

  // Titles
  if (_.isObject(unifiedRecord.title)) {
    insertTitles(biblFull, unifiedRecord);
  }

  // Identifiers
  insertIdentifiers(biblFull, unifiedRecord);

  // Language
  if (_.isArray(unifiedRecord.language) && !_.isEmpty(unifiedRecord.language)) {
    insertLanguage(biblFull, unifiedRecord);
  }

  // Abstract
  if (_.isObject(unifiedRecord.abstract)) {
    insertAbstract(biblFull, unifiedRecord);
  }

  const fileContent = create(xmlDoc).end();

  return fs.outputFile(path, fileContent, 'utf-8');
}

/**
 * Inserts the titles from `unifiedRecord` into `biblFull`.
 * @param {object} biblFull The <biblFull> node to insert the titles in.
 * @param {object} unifiedRecord The unified record to get the titles from.
 */
function insertTitles (biblFull, unifiedRecord) {
  _.set(biblFull, 'titleStmt.title', []);
  const titles = biblFull.titleStmt.title;

  if (_.get(unifiedRecord, 'title.en')) {
    titles.push({ '@xml:lang': 'en', '#': unifiedRecord.title.en });
  }

  if (_.get(unifiedRecord, 'title.fr')) {
    titles.push({ '@xml:lang': 'fr', '#': unifiedRecord.title.fr });
  }
}

/**
 * Inserts the identifiers from `unifiedRecord` into `biblFull`.
 * @param {object} biblFull The <biblFull> node to insert the identifiers in.
 * @param {object} unifiedRecord The unified record to get the identifiers from.
 */
function insertIdentifiers (biblFull, unifiedRecord) {
  // DOI
  if (unifiedRecord.doi) {
    if (!_.has(biblFull, 'sourceDesc.biblStruct.idno')) {
      _.set(biblFull, 'sourceDesc.biblStruct.idno', []);
    }

    biblFull.sourceDesc.biblStruct.idno.push({ '@type': 'doi', '#': unifiedRecord.doi });
  }
}

/**
 * Inserts the language from `unifiedRecord` into `biblFull`.
 * @param {object} biblFull The <biblFull> node to insert the language in.
 * @param {object} unifiedRecord The unified record to get the language from.
 */
function insertLanguage (biblFull, unifiedRecord) {
  _.set(biblFull, 'profileDesc.langUsage.language', []);

  for (const languageName of unifiedRecord.language) {
    const currentLanguageNode = {};

    // Records should only be in either English or French
    const languageNameLower = languageName.toLowerCase();
    if (languageNameLower.includes('english')) {
      currentLanguageNode['@ident'] = 'en';
    } else if (languageNameLower.includes('french')) {
      currentLanguageNode['@ident'] = 'fr';
    } else {
      currentLanguageNode['@ident'] = 'und';
    }

    // The text content of a node is under the '#' key with xmlbuilder2
    currentLanguageNode['#'] = languageName;

    biblFull.profileDesc.langUsage.language.push(currentLanguageNode);
  }
}

/**
 * Inserts the abstract from `unifiedRecord` into `biblFull`.
 * @param {object} biblFull The <biblFull> node to insert the abstract in.
 * @param {object} unifiedRecord The unified record to get the abstract from.
 */
function insertAbstract (biblFull, unifiedRecord) {
  let language;
  if (unifiedRecord.abstract.en) language = 'en';
  else if (unifiedRecord.abstract.fr) language = 'fr';

  // Create the abstract node
  _.set(biblFull, 'profileDesc.abstract', {});
  const { abstract } = biblFull.profileDesc;

  // Set the language attribute
  abstract['@xml:lang'] = language;

  // Insert the abstract text
  abstract.p = unifiedRecord.abstract[language];
}

module.exports = generateHalTEI;
